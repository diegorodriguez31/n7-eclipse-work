[comment encoding = UTF-8 /]
[module totina('http://petrinet')]


[template public petrinetToTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name + '.net', false, 'UTF-8')]
net [aPetriNet.name/]
[comment Afin de transformer la Place en texte, on utilise les fonctions définies plus bas
pour récupérer l'ensemble des places]
[let places : OrderedSet(Place) = aPetriNet.getPlaces() ] 
[comment on applique la transformation sur chaque place]
[for (place : Place | places)]
pl [place.name/] ([place.marking/])
[/for]
[/let]

[comment on récupère l'ensemble des transitions avec la fonction définie plus bas]
[let transitions: OrderedSet(Transition) = aPetriNet.getTransitions() ] 
[comment On applique la transformation sur chaque transition avec une autre fonction définie dessous]
[for (transition : Transition | transitions)]
[transition.toTina()/]
[/for]
[/let]
[/file]
[/template]

[comment fonctions qui renvoient l'ensemble des transitions et des places contenues dans un modèle]
[query public getPlaces(p: PetriNet) : OrderedSet(Place) = 
    p.petriElements->select(e | e.oclIsTypeOf(Place))
        ->collect(e | e.oclAsType(Place))
        ->asOrderedSet()
/]

[query public getTransitions(p: PetriNet) : OrderedSet(Transition) = 
    p.petriElements->select(e | e.oclIsTypeOf(Transition))
        ->collect(e | e.oclAsType(Transition))
        ->asOrderedSet()
/]

[comment en fonction de type de transition, on génère le texte correspondant]
[template public toTina(tr : Transition) post (trim()) ]
tr [tr.name /] [for (arc: Arc | tr.incoming)
            before (' ') separator (' ') after(' ')
    ][arc.source.name /][if (arc.isReadArc)]?[arc.weight/][elseif (arc.weight > 1)]*[arc.weight/][/if][/for]->[for (arc: Arc | tr.outgoing)
            before (' ') separator (' ') after(' ')
    ][arc.target.name /][if (arc.isReadArc)]?[arc.weight/][elseif (arc.weight > 1)]*[arc.weight/][/if][/for]
[/template]